---
- name: Deploy gateway apps using Docker Compose
  hosts: all
  become: yes

  tasks:
    - name: Ensure Git is installed
      apt:
        name: git
        state: present
      when: ansible_os_family == "Debian"

    - name: Clone the self-hosted repository using https
      git:
        repo: "https://github.com/whalingdotxyz/self-hosted.git"
        dest: /home/{{ ansible_user }}/git/self-hosted
        update: yes
      become_user: "{{ ansible_user }}"

    - name: Set up and deploy Postgres with Docker Compose
      block:
        - name: Create directories for Postgres
          ansible.builtin.file:
            path: "{{ item }}"
            state: directory
            mode: "0755"
            recurse: yes
          loop:
            - "{{ path_to_postgres_config }}"
          when: path_to_postgres_config is defined

        - name: Run Docker Compose to deploy Postgres
          shell: docker compose up -d
          args:
            chdir: /home/{{ ansible_user }}/git/self-hosted/apps/postgres
          environment:
            path_to_postgres_config: "{{ lookup('env', 'path_to_postgres_config') }}"
            postgres_password: "{{ lookup('env', 'postgres_password') }}"
          become_user: "{{ ansible_user }}"
          register: docker_compose_output

        - name: Show docker compose output for Postgres
          debug:
            var: docker_compose_output.stdout

    - name: Set up and deploy Redis with Docker Compose
      block:
        - name: Create directories for Redis
          ansible.builtin.file:
            path: "{{ item }}"
            state: directory
            mode: "0755"
            recurse: yes
          loop:
            - "{{ path_to_redis_config }}"
          when: path_to_redis_config is defined

        - name: Run Docker Compose to deploy Redis
          shell: docker compose up -d
          args:
            chdir: /home/{{ ansible_user }}/git/self-hosted/apps/redis
          environment:
            path_to_redis_config: "{{ lookup('env', 'path_to_redis_config') }}"
            redis_password: "{{ lookup('env', 'redis_password') }}"
          become_user: "{{ ansible_user }}"
          register: docker_compose_output

        - name: Show docker compose output for Postgres
          debug:
            var: docker_compose_output.stdout

    - name: Set up and deploy Authentik with Docker Compose
      block:
        - name: Create directories for Authentik
          ansible.builtin.file:
            path: "{{ item }}"
            state: directory
            mode: "0755"
            recurse: yes
          loop:
            - "{{ path_to_authentik_media }}"
            - "{{ path_to_authentik_templates }}"
            - "{{ path_to_authentik_certs }}"
          when: path_to_authentik_media is defined and path_to_authentik_templates is defined and path_to_authentik_certs is defined

        - name: Check if the Authentik database exists
          shell: |
            docker exec -u postgres postgres psql -U postgres -tAc "SELECT 1 FROM pg_database WHERE datname = 'authentik';"
          register: db_check
          changed_when: false
          failed_when: db_check.rc != 0

        - name: Create the Authentik database in PostgreSQL
          shell: |
            docker exec -u postgres postgres psql -U postgres -c "CREATE DATABASE authentik;"
          when: db_check.stdout == ""
          ignore_errors: yes

        - name: Run Docker Compose to deploy Authentik
          shell: docker compose up -d
          args:
            chdir: /home/{{ ansible_user }}/git/self-hosted/apps/authentik
          environment:
            db_host: "{{ lookup('env', 'db_host') }}"
            redis_password: "{{ lookup('env', 'redis_password') }}"
            postgres_password: "{{ lookup('env', 'postgres_password') }}"
            authentik_secret_key: "{{ lookup('env', 'authentik_secret_key') }}"
            path_to_authentik_media: "{{ lookup('env', 'path_to_authentik_media') }}"
            path_to_authentik_templates: "{{ lookup('env', 'path_to_authentik_templates') }}"
            path_to_authentik_certs: "{{ lookup('env', 'path_to_authentik_certs') }}"
          become_user: "{{ ansible_user }}"
