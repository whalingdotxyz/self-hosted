---
- name: Update running containers using Docker Compose
  hosts: all
  become: yes

  tasks:
    - name: Ensure Git is installed
      apt:
        name: git
        state: present
      when: ansible_os_family == "Debian"

    - name: Remove existing repository if it exists
      file:
        path: /home/{{ ansible_user }}/git/self-hosted
        state: absent
      when: ansible_user is defined   # Ensure ansible_user is defined

    - name: Clone the self-hosted repository using https
      git:
        repo: 'https://github.com/whalingdotxyz/self-hosted.git'
        dest: /home/{{ ansible_user }}/git/self-hosted
        update: yes
      become_user: "{{ ansible_user }}"

    # Get a list of all running container names
    - name: Get running containers
      shell: |
        docker ps --filter "status=running" --format "{{ '{{.Names}}' }}" | awk -F'_' '{print $NF}'
      register: running_containers
      become: yes

    - name: Update Docker container if running
      shell: |
        cd /home/{{ ansible_user }}/git/self-hosted/apps/{{ item }} && \
        docker compose pull && \
        docker compose up -d
      args:
        chdir: /home/{{ ansible_user }}/git/self-hosted/apps/{{ item }}
      environment:
        #path to directories
        path_to_media: "{{ lookup('env', 'path_to_media') }}"
        path_to_data: "{{ lookup('env', 'path_to_data') }}"
        path_to_apps: "{{ lookup('env', 'path_to_apps') }}"
        path_to_downloads: "{{ lookup('env', 'path_to_downloads') }}"
        path_to_tvshows: "{{ lookup('env', 'path_to_tvshows') }}"
        path_to_movies: "{{ lookup('env', 'path_to_movies') }}"

        #bazzar config
        path_to_bazarr_config: "{{ lookup('env', 'path_to_bazarr_config') }}"

        #prowlarr config
        path_to_prowlarr_config: "{{ lookup('env', 'path_to_prowlarr_config') }}"

        #sonarr config
        path_to_sonarr_config: "{{ lookup('env', 'path_to_sonarr_config') }}"

        #radarr config
        path_to_radarr_config: "{{ lookup('env', 'path_to_radarr_config') }}"

        #jellyfin config
        path_to_jellyfin_config: "{{ lookup('env', 'path_to_jellyfin_config') }}"

        #jellyseer config
        path_to_jellyseerr_config: "{{ lookup('env', 'path_to_jellyseerr_config') }}"

        #transmission config
        path_to_transmission_config: "{{ lookup('env', 'path_to_transmission_config') }}"
        username: "{{ lookup('env', 'username') }}"
        password: "{{ lookup('env', 'password') }}"

        #open-webui config
        path_to_openw_webui_config: "{{ lookup('env', 'path_to_open_webui_config') }}"
        openai_api_key: "{{ lookup('env', 'openai_api_key') }}"
        oauth_client_id: "{{ lookup('env', 'oauth_client_id') }}"
        oauth_client_secret: "{{ lookup('env', 'oauth_client_secret') }}"
        oauth_provider_url: "{{ lookup('env', 'oauth_provider_url') }}"
        oauth_provider_name: "{{ lookup('env', 'oauth_provider_name') }}"
        #nextcloud config
        path_to_nextcloud_config: "{{ lookup('env', 'path_to_nextcloud_config') }}"
        path_to_nextcloud_data: "{{ lookup('env', 'path_to_nextcloud_data') }}"
        nextcloud_trusted_domains: "{{ lookup('env', 'nextcloud_trusted_domains') }}"
        nextcloud_overwritehost: "{{ lookup('env', 'nextcloud_overwritehost') }}"

        #only-office config
        path_to_only_office: "{{ lookup('env', 'path_to_only_office') }}"

        #duplicati config
        path_to_duplicati_config: "{{ lookup('env', 'path_to_duplicati_config') }}"
        duplicati_encryption_key: "{{ lookup('env', 'duplicati_encryption_key') }}"

        #postgres config
        path_to_postgres_config: "{{ lookup('env', 'path_to_postgres_config') }}"
        postgres_password: "{{ lookup('env', 'postgres_password') }}"

        #redis config
        path_to_redis_config: "{{ lookup('env', 'path_to_redis_config') }}"
        redis_password: "{{ lookup('env', 'redis_password') }}"

        #ghostfolio
        path_to_ghostfolio_config: "{{ lookup('env', 'path_to_ghostfolio_config') }}"
        gf_access_token: "{{ lookup('env', 'gf_access_token') }}"
        gf_jwt_secret: "{{ lookup('env', 'gf_jwt_secret') }}"
        db_host: "{{ lookup('env', 'db_host') }}" #host ip for postgres and redis
        redis_password: "{{ lookup('env', 'redis_password') }}"
        postgres_password: "{{ lookup('env', 'postgres_password') }}"

        #homepage
        path_to_homepage_config: "{{ lookup('env', 'path_to_homepage_config') }}"

        #authentik
        authentik_secret_key: "{{ lookup('env', 'authentik_secret_key') }}"
        path_to_authentik_media: "{{ lookup('env', 'path_to_authentik_media') }}"
        path_to_authentik_templates: "{{ lookup('env', 'path_to_authentik_templates') }}"

      become_user: "{{ ansible_user }}"
      loop: "{{ running_containers.stdout_lines }}"

    # Remove orphaned containers and volumes
    - name: Clean up unused Docker resources (volumes, networks)
      shell: docker system prune -f --volumes
      become: yes
