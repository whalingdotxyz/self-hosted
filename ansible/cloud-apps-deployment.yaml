- name: Deploy cloud apps using Docker Compose
  hosts: all
  become: yes

  tasks:
    - name: Ensure Git is installed
      apt:
        name: git
        state: present
      when: ansible_os_family == "Debian"

    - name: Clone the self-hosted repository using https
      git:
        repo: "https://github.com/{{git_username}}/self-hosted.git"
        dest: /home/{{ ansible_user }}/git/self-hosted
        update: yes
      become_user: "{{ ansible_user }}"

    - name: Set up and deploy Postgres with Docker Compose
      block:
        - name: Create directories for Postgres
          ansible.builtin.file:
            path: "{{ item }}"
            state: directory
            mode: "0755"
            recurse: yes
          loop:
            - "{{ path_to_postgres_config }}"
          when: path_to_postgres_config is defined

        - name: Run Docker Compose to deploy Postgres
          shell: docker compose up -d
          args:
            chdir: /home/{{ ansible_user }}/git/self-hosted/apps/postgres
          environment:
            path_to_postgres_config: "{{ lookup('env', 'path_to_postgres_config') }}"
            postgres_password: "{{ lookup('env', 'postgres_password') }}"
          become_user: "{{ ansible_user }}"
          register: docker_compose_output

        - name: Show docker compose output for Postgres
          debug:
            var: docker_compose_output.stdout

    - name: Set up and deploy Redis with Docker Compose
      block:
        - name: Create directories for Redis
          ansible.builtin.file:
            path: "{{ item }}"
            state: directory
            mode: "0755"
            recurse: yes
          loop:
            - "{{ path_to_redis_config }}"
          when: path_to_redis_config is defined

        - name: Run Docker Compose to deploy Redis
          shell: docker compose up -d
          args:
            chdir: /home/{{ ansible_user }}/git/self-hosted/apps/redis
          environment:
            path_to_redis_config: "{{ lookup('env', 'path_to_redis_config') }}"
            redis_password: "{{ lookup('env', 'redis_password') }}"
          become_user: "{{ ansible_user }}"
          register: docker_compose_output

        - name: Show docker compose output for Postgres
          debug:
            var: docker_compose_output.stdout

    - name: Set up Open WebUI configuration directory and run Docker Compose
      block:
        - name: Create directories for Open WebUI
          ansible.builtin.file:
            path: "{{ item }}"
            state: directory
            mode: "0755"
            recurse: yes
            owner: "{{ ansible_user }}"
            group: "{{ ansible_user }}"
          loop:
            - "{{ path_to_open_webui_config }}"
          when: path_to_open_webui_config is defined

        - name: Run Docker Compose to deploy Open WebUI
          shell: docker compose up -d
          args:
            chdir: /home/{{ ansible_user }}/git/self-hosted/apps/open-webui
          environment:
            path_to_open_webui_config: "{{ lookup('env', 'path_to_open_webui_config') }}"
            openai_api_key: "{{ lookup('env', 'openai_api_key') }}"
            oauth_client_id: "{{ lookup('env', 'oauth_client_id') }}"
            oauth_client_secret: "{{ lookup('env', 'oauth_client_secret') }}"
            oauth_provider_url: "{{ lookup('env', 'oauth_provider_url') }}"
            oauth_provider_name: "{{ lookup('env', 'oauth_provider_name') }}"
          become_user: "{{ ansible_user }}"

    - name: Set up Nextcloud configuration directory and run Docker Compose
      block:
        - name: Create directories for Nextcloud
          ansible.builtin.file:
            path: "{{ item }}"
            state: directory
            mode: "0755"
            recurse: yes
            owner: "{{ ansible_user }}"
            group: "{{ ansible_user }}"
          loop:
            - "{{ path_to_nextcloud_config }}"
            - "{{ path_to_nextcloud_data }}"
          when: path_to_nextcloud_config is defined and path_to_nextcloud_data is defined

        - name: Check if the Nextcloud database exists
          shell: |
            docker exec -u postgres postgres psql -U postgres -tc "SELECT 1 FROM pg_database WHERE datname = 'nextcloud';" || echo "Database not found"
          register: db_check
          changed_when: false

        - name: Create the Nextcloud database in PostgreSQL
          shell: |
            docker exec -u postgres postgres psql -U postgres -c "CREATE DATABASE nextcloud;"
          when: "'Database not found' in db_check.stdout" # Only create the database if it doesn't exist
          ignore_errors: yes

        - name: Run Docker Compose to deploy Nextcloud
          shell: docker compose up -d
          args:
            chdir: /home/{{ ansible_user }}/git/self-hosted/apps/nextcloud
          environment:
            nextcloud_trusted_domains: "{{ lookup('env', 'nextcloud_trusted_domains') }}"
            path_to_nextcloud_config: "{{ lookup('env', 'path_to_nextcloud_config') }}"
            path_to_nextcloud_data: "{{ lookup('env', 'path_to_nextcloud_data') }}"
          become_user: "{{ ansible_user }}"

    - name: Set up Only-Office configuration directory and run Docker Compose
      block:
        - name: Create directories for Only-Office
          ansible.builtin.file:
            path: "{{ item }}"
            state: directory
            mode: "0755"
            recurse: yes
            owner: "{{ ansible_user }}"
            group: "{{ ansible_user }}"
          loop:
            - "{{ path_to_only_office }}"
          when: path_to_only_office is defined

        - name: Run Docker Compose to deploy Only-Office
          shell: docker compose up -d
          args:
            chdir: /home/{{ ansible_user }}/git/self-hosted/apps/only-office
          environment:
            path_to_onlyoffice: "{{ lookup('env', 'path_to_only_office') }}"
          become_user: "{{ ansible_user }}"

    - name: Set up Duplicati configuration directory and run Docker Compose
      block:
        - name: Create directories for Duplicati
          ansible.builtin.file:
            path: "{{ item }}"
            state: directory
            mode: "0755"
            recurse: yes
            owner: "{{ ansible_user }}"
            group: "{{ ansible_user }}"
          loop:
            - "{{ path_to_duplicati_config }}"
          when: path_to_duplicati_config is defined

        - name: Run Docker Compose to deploy Duplicati
          shell: docker compose up -d
          args:
            chdir: /home/{{ ansible_user }}/git/self-hosted/apps/duplicati
          environment:
            path_to_duplicati_config: "{{ lookup('env', 'path_to_duplicati_config') }}"
            duplicati_encryption_key: "{{ lookup('env', 'duplicati_encryption_key') }}"
            path_to_media: "{{ lookup('env', 'path_to_media') }}"
            path_to_data: "{{ lookup('env', 'path_to_data') }}"
            path_to_apps: "{{ lookup('env', 'path_to_apps') }}"
            password: "{{ lookup('env', 'password') }}"
          become_user: "{{ ansible_user }}"

    - name: Set up Ghostfolio configuration directory and run Docker Compose
      block:
        - name: Check if the Ghostfolio database exists
          shell: |
            docker exec -u postgres postgres psql -U postgres -tc "SELECT 1 FROM pg_database WHERE datname = 'ghostfolio';" || echo "Database not found"
          register: db_check
          changed_when: false

        - name: Create the Ghostfolio database in PostgreSQL
          shell: |
            docker exec -u postgres postgres psql -U postgres -c "CREATE DATABASE ghostfolio;"
          when: "'Database not found' in db_check.stdout" # Only create the database if it doesn't exist
          ignore_errors: yes

        - name: Run Docker Compose to deploy Ghostfolio
          shell: docker compose up -d
          args:
            chdir: /home/{{ ansible_user }}/git/self-hosted/apps/ghostfolio
          environment:
            gf_access_token: "{{ lookup('env', 'gf_access_token') }}"
            gf_jwt_secret: "{{ lookup('env', 'gf_jwt_secret') }}"
            db_host: "{{ lookup('env', 'db_host') }}"
            redis_password: "{{ lookup('env', 'redis_password') }}"
            postgres_password: "{{ lookup('env', 'postgres_password') }}"
          become_user: "{{ ansible_user }}"

    - name: Set up Homepage configuration directory and run Docker Compose
      block:
        - name: Create directories for Homepage
          ansible.builtin.file:
            path: "{{ item }}"
            state: directory
            mode: "0755"
            recurse: yes
            owner: "{{ ansible_user }}"
            group: "{{ ansible_user }}"
          loop:
            - "{{ path_to_homepage_config }}"
          when: path_to_homepage_config is defined

        - name: Run Docker Compose to deploy Homepage
          shell: docker compose up -d
          args:
            chdir: /home/{{ ansible_user }}/git/self-hosted/apps/homepage
          environment:
            path_to_homepage_config: "{{ lookup('env', 'path_to_homepage_config') }}"
            homepage_allowed_host: "{{ lookup('env', 'homepage_allowed_host') }}"
          become_user: "{{ ansible_user }}"

    - name: Set up ActualBudget configuration directory and run Docker Compose
      block:
        - name: Create directories for ActualBudget
          ansible.builtin.file:
            path: "{{ item }}"
            state: directory
            mode: "0755"
            recurse: yes
            owner: "{{ ansible_user }}"
            group: "{{ ansible_user }}"
          loop:
            - "{{ path_to_actualbudget }}"
          when: path_to_actualbudget is defined

        - name: Run Docker Compose to deploy ActualBudget
          shell: docker compose up -d
          args:
            chdir: /home/{{ ansible_user }}/git/self-hosted/apps/actualbudget
          environment:
            path_to_actualbudget: "{{ lookup('env', 'path_to_actualbudget') }}"
          become_user: "{{ ansible_user }}"

    - name: Set up Actual-Budget configuration directory and run Docker Compose
      block:
        - name: Create directories for Actual-Budget
          ansible.builtin.file:
            path: "{{ item }}"
            state: directory
            mode: "0755"
            recurse: yes
            owner: "{{ ansible_user }}"
            group: "{{ ansible_user }}"
          loop:
            - "{{ path_to_actual_budget }}"
          when: path_to_actual_budget is defined

        - name: Run Docker Compose to deploy Actual-Budget
          shell: docker compose up -d
          args:
            chdir: /home/{{ ansible_user }}/git/self-hosted/apps/actual-budget
          environment:
            path_to_actual_budget: "{{ lookup('env', 'path_to_actual_budget') }}"
          become_user: "{{ ansible_user }}"
